{"ast":null,"code":"import axios from 'axios';\nconst baseUrl = \"http://localhost:3001\";\nexport async function saveProfessor(professorData) {\n  try {\n    const response = await axios({\n      url: `${baseUrl}/professors`,\n      method: 'POST',\n      data: professorData\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n;\nexport async function saveUser(professorData) {\n  try {\n    const response = await axios({\n      url: `${baseUrl}/users`,\n      method: 'POST',\n      data: {\n        \"email\": professorData.Correo,\n        \"user\": professorData.Usuario,\n        \"password\": professorData.Contraseña,\n        \"type\": 2\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n;\nexport async function getProfessorWithoutSubjects() {\n  try {\n    const response = await axios({\n      url: `${baseUrl}/professorsWithoutSubjects`,\n      method: 'GET'\n    });\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n;\nexport async function getProfessorById(professorId) {\n  try {\n    const response = await axios({\n      url: `${baseUrl}/professors/${professorId}`,\n      method: 'GET'\n    });\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n;\nexport async function getProfessorByUsername(professorUsername) {\n  try {\n    const response = await axios({\n      url: `${baseUrl}/professorByUsername/${professorUsername}`,\n      method: 'GET'\n    });\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n;\nexport async function getProfessorsByLevel(level) {\n  try {\n    const response = await axios({\n      url: `${baseUrl}/professorsByLevel/${level}`,\n      method: 'GET'\n    });\n    const professors = response.data;\n    const avaliableProfessors = [];\n\n    for (var i = 0; i < professors.length; i++) {\n      if (professors[i].disponibility == 0 && professors[i].idCourse.length == 0 || professors[i].disponibility == 1) {\n        avaliableProfessors.push(professors[i]);\n      }\n    }\n\n    response.data = avaliableProfessors;\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport async function updateProfessor(professorData, setProfessorData) {\n  const response = await axios.put(`${baseUrl}/professors/${professorData._id}`, {\n    idCourse: professorData.idCourse,\n    idSubject: professorData.idSubject\n  }).then(response => {\n    window.alert('Asignación realizada con éxito');\n    window.location.reload();\n  }).catch(error => {\n    console.log(error);\n  });\n  setProfessorData([]);\n}\n;\nexport async function updateCoursesProfessor(professorData, setProfessorData) {\n  const response = await axios.put(`${baseUrl}/professorsCourses/${professorData._id}`, {\n    idCourse: professorData.idCourse\n  }).then(response => {\n    console.log('Data: ' + professorData);\n    window.alert('Asignación realizada con éxito');\n    window.location.reload();\n  }).catch(error => {\n    console.log(error);\n  });\n  setProfessorData([]);\n}\n;","map":{"version":3,"sources":["C:/Users/elkin/OneDrive/Escritorio/2. Código/Codigo_v1.2/frontend/src/services/professorService.js"],"names":["axios","baseUrl","saveProfessor","professorData","response","url","method","data","error","console","log","saveUser","Correo","Usuario","Contraseña","getProfessorWithoutSubjects","getProfessorById","professorId","getProfessorByUsername","professorUsername","getProfessorsByLevel","level","professors","avaliableProfessors","i","length","disponibility","idCourse","push","updateProfessor","setProfessorData","put","_id","idSubject","then","window","alert","location","reload","catch","updateCoursesProfessor"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\n\r\nconst baseUrl = \"http://localhost:3001\";\r\n\r\nexport async function saveProfessor(professorData){\r\n\r\n    try{\r\n        const response = await axios({\r\n            url: `${baseUrl}/professors`,\r\n            method: 'POST',\r\n            data: professorData\r\n        });\r\n        \r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nexport async function saveUser(professorData){\r\n\r\n    try{\r\n        const response = await axios({\r\n            url: `${baseUrl}/users`,\r\n            method: 'POST',\r\n            data: {\r\n                \"email\": professorData.Correo,\r\n                \"user\": professorData.Usuario,\r\n                \"password\": professorData.Contraseña,\r\n                \"type\": 2 \r\n            }\r\n        });\r\n        \r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nexport async function getProfessorWithoutSubjects(){\r\n    try{\r\n        const response = await axios({\r\n            url: `${baseUrl}/professorsWithoutSubjects`,\r\n            method: 'GET',\r\n        })\r\n        \r\n        return response;\r\n  \r\n    }catch(error){\r\n      console.log(error)\r\n    }\r\n};\r\n\r\nexport async function getProfessorById(professorId){\r\n    try{\r\n        const response = await axios({\r\n            url: `${baseUrl}/professors/${professorId}`,\r\n            method: 'GET',\r\n        })\r\n\r\n        return response;\r\n  \r\n    }catch(error){\r\n      console.log(error)\r\n    }\r\n};\r\n\r\n\r\nexport async function getProfessorByUsername(professorUsername){\r\n    try{\r\n        const response = await axios({\r\n            url: `${baseUrl}/professorByUsername/${professorUsername}`,\r\n            method: 'GET',\r\n        })\r\n        \r\n        return response;\r\n        \r\n  \r\n    }catch(error){\r\n      console.log(error)\r\n    }\r\n};\r\n\r\nexport async function getProfessorsByLevel(level){\r\n    try{\r\n        const response = await axios({\r\n            url: `${baseUrl}/professorsByLevel/${level}`,\r\n            method: 'GET',\r\n        })\r\n        \r\n        const professors = response.data;\r\n        const avaliableProfessors = [];\r\n\r\n        for (var i=0; i<professors.length; i++) {\r\n            if ((professors[i].disponibility == 0 && professors[i].idCourse.length == 0) || professors[i].disponibility == 1) {\r\n                avaliableProfessors.push(professors[i]);\r\n            }\r\n        }\r\n        response.data = avaliableProfessors;\r\n        return response;\r\n\r\n    }catch(error){\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport async function updateProfessor(professorData, setProfessorData){\r\n    const response = await axios.put(`${baseUrl}/professors/${professorData._id}`, {\r\n        idCourse: professorData.idCourse,\r\n        idSubject: professorData.idSubject\r\n    })\r\n    .then(response => {\r\n        window.alert('Asignación realizada con éxito');\r\n        window.location.reload();\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n    })\r\n    setProfessorData([]);\r\n};\r\n\r\nexport async function updateCoursesProfessor(professorData, setProfessorData){\r\n    const response = await axios.put(`${baseUrl}/professorsCourses/${professorData._id}`, {\r\n        idCourse: professorData.idCourse\r\n    })\r\n    .then(response => {\r\n        console.log('Data: ' + professorData)\r\n        window.alert('Asignación realizada con éxito');\r\n        window.location.reload();\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n    })\r\n    setProfessorData([]);\r\n};"]},"metadata":{},"sourceType":"module"}