{"ast":null,"code":"import axios from 'axios';\nconst baseUrl = \"http://localhost:3001\";\nexport async function saveCourse(courseData) {\n  try {\n    const response = await axios({\n      url: `${baseUrl}/courses`,\n      method: 'POST',\n      data: courseData\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n;\nexport async function getCourses() {\n  try {\n    const response = await axios({\n      url: `${baseUrl}/courses`,\n      method: 'GET'\n    });\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport async function getCoursesWithoutSchoolYear() {\n  try {\n    const response = await axios({\n      url: `${baseUrl}/coursesWithoutSchoolYear`,\n      method: 'GET'\n    });\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n;\nexport async function getCourseById(courseId) {\n  try {\n    const response = await axios({\n      url: `${baseUrl}/courses/${courseId}`,\n      method: 'GET'\n    });\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n;\nexport async function getCoursesById(coursesId) {\n  console.log(coursesId);\n}\n;\nexport async function getCourseByNevel(level) {\n  try {\n    const response = await axios({\n      url: `${baseUrl}/coursesByLevel/${level}`,\n      method: 'GET'\n    });\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport async function getCoursesWithCapacity() {\n  const max = 15;\n\n  try {\n    const response = await axios({\n      url: `${baseUrl}/courses`,\n      method: 'GET'\n    });\n    const courses = response.data;\n    const courseWithCapacity = [];\n\n    for (var i = 0; i < courses.length; i++) {\n      try {\n        const response2 = await axios({\n          url: `${baseUrl}/studentsByCourse/${courses[i]._id}`,\n          method: 'GET'\n        });\n        const numberStudents = response2.data.length;\n\n        if (numberStudents < max) {\n          courseWithCapacity.push(courses[i]);\n        }\n\n        ;\n      } catch (e) {\n        console.log(e);\n      }\n\n      ;\n    }\n\n    ;\n    response.data = courseWithCapacity;\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n\n  ;\n}\n;\nexport async function updateCourse(courseData, setCourseData) {\n  const response = await axios.put(`${baseUrl}/courses/${courseData._id}`, {\n    idSchoolYear: courseData.idSchoolYear\n  }).then(response => {\n    window.alert('Asignación realizada con éxito');\n    window.location.reload();\n  }).catch(error => {\n    console.log(error);\n  });\n  setCourseData([]);\n}\n;","map":{"version":3,"sources":["C:/Users/elkin/OneDrive/Escritorio/2. Código/Codigo_v1.2/frontend/src/services/courseService.js"],"names":["axios","baseUrl","saveCourse","courseData","response","url","method","data","error","console","log","getCourses","getCoursesWithoutSchoolYear","getCourseById","courseId","getCoursesById","coursesId","getCourseByNevel","level","getCoursesWithCapacity","max","courses","courseWithCapacity","i","length","response2","_id","numberStudents","push","e","updateCourse","setCourseData","put","idSchoolYear","then","window","alert","location","reload","catch"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\n\r\nconst baseUrl = \"http://localhost:3001\";\r\n\r\nexport async function saveCourse(courseData){\r\n\r\n    try{\r\n        const response = await axios({\r\n            url: `${baseUrl}/courses`,\r\n            method: 'POST',\r\n            data: courseData\r\n        });\r\n        \r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nexport async function getCourses(){\r\n    try{\r\n        const response = await axios({\r\n            url: `${baseUrl}/courses`,\r\n            method: 'GET',\r\n        })\r\n        return response;\r\n        \r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport async function getCoursesWithoutSchoolYear(){\r\n    try{\r\n        const response = await axios({\r\n            url: `${baseUrl}/coursesWithoutSchoolYear`,\r\n            method: 'GET',\r\n        })\r\n        \r\n        return response;\r\n  \r\n    }catch(error){\r\n      console.log(error)\r\n    }\r\n};\r\n\r\nexport async function getCourseById(courseId){\r\n    \r\n    try{\r\n        const response = await axios({\r\n            url: `${baseUrl}/courses/${courseId}`,\r\n            method: 'GET',\r\n        })\r\n        \r\n        return response;\r\n  \r\n    }catch(error){\r\n      console.log(error)\r\n    }\r\n};\r\n\r\nexport async function getCoursesById(coursesId){\r\n    console.log(coursesId)\r\n    \r\n};\r\n\r\nexport async function getCourseByNevel(level){\r\n    try{\r\n        const response = await axios({\r\n            url: `${baseUrl}/coursesByLevel/${level}`,\r\n            method: 'GET',\r\n        })\r\n        return response;\r\n    }catch(error){\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport async function getCoursesWithCapacity(){\r\n    const max = 15;\r\n\r\n    try{\r\n        const response = await axios({\r\n            url: `${baseUrl}/courses`,\r\n            method: 'GET',\r\n        });\r\n        const courses = response.data;\r\n        const courseWithCapacity = [];\r\n\r\n        for (var i=0; i<courses.length; i++) {\r\n            \r\n            try{\r\n                const response2 = await axios({\r\n                    url: `${baseUrl}/studentsByCourse/${courses[i]._id}`,\r\n                    method: 'GET'\r\n                });\r\n                const numberStudents = response2.data.length;\r\n\r\n                if (numberStudents < max) {\r\n                    courseWithCapacity.push(courses[i]);\r\n                };\r\n\r\n            }catch(e){\r\n                console.log(e);\r\n            };\r\n\r\n        };\r\n        response.data = courseWithCapacity;\r\n        return response;\r\n\r\n    }catch(error){\r\n      console.log(error);\r\n    };\r\n};\r\n\r\nexport async function updateCourse(courseData, setCourseData){\r\n    const response = await axios.put(`${baseUrl}/courses/${courseData._id}`, {\r\n        idSchoolYear: courseData.idSchoolYear\r\n    })\r\n    .then(response => {\r\n        window.alert('Asignación realizada con éxito');\r\n        window.location.reload();\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n    })\r\n    \r\n    setCourseData([]);\r\n    \r\n};"]},"metadata":{},"sourceType":"module"}