{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elkin\\\\OneDrive\\\\Escritorio\\\\2. C\\xF3digo\\\\Codigo_v1.2\\\\frontend\\\\src\\\\pages\\\\AssignationCourseToSchoolYear.js\",\n    _s = $RefreshSig$();\n\nimport Assignation from '../components/FormAssignationCourseToSchoolYear';\nimport React from 'react';\nimport NavbarAdmin from '../components/NavbarAdmin';\nimport Cookies from 'universal-cookie/es6';\nimport { useEffect, useState } from 'react';\nimport { getCoursesWithoutSchoolYear, updateCourse, getCourseById } from '../services/courseService';\nimport { getActualSchoolYear } from '../services/periodService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst cookies = new Cookies();\n\nconst AssignationCourseToSchoolYear = () => {\n  _s();\n\n  const [courses, setCourses] = useState([]);\n  const [schoolYears, setSchoolYears] = useState([]);\n  const [course, setCourse] = useState({});\n  const [id, setId] = useState(\"\");\n  useEffect(() => {\n    async function loadCourses() {\n      const response = await getCoursesWithoutSchoolYear();\n\n      if (response.status === 200) {\n        setCourses(response.data);\n      }\n\n      ;\n    }\n\n    ;\n    loadCourses();\n  }, []);\n  useEffect(() => {\n    async function loadSchoolYears() {\n      const response = await getActualSchoolYear();\n\n      if (response.status === 200) {\n        setSchoolYears(response.data);\n      }\n\n      ;\n    }\n\n    ;\n    loadSchoolYears();\n  }, []);\n  useEffect(() => {\n    async function findCourse() {\n      const response = await getCourseById(id);\n\n      if (response.status === 200) {\n        setCourse(response.data);\n      }\n\n      ;\n    }\n\n    ;\n    findCourse();\n  }, [id]);\n  useEffect(() => {\n    if (typeof cookies.get('user') === 'undefined' || cookies.get('type', {\n      path: \"/\"\n    }) !== '0') {\n      window.location.href = \"./\";\n    }\n  });\n\n  const handleUpdate = (courseData, setCourseData) => {\n    updateCourse(courseData, setCourseData);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavbarAdmin, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 28\n    }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n      children: /*#__PURE__*/_jsxDEV(Assignation, {\n        handleUpdate: handleUpdate,\n        courses: courses,\n        schoolYears: schoolYears,\n        course: course,\n        setCourse: setCourse,\n        setId: setId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AssignationCourseToSchoolYear, \"L4PyIW1oVkWC92AfNM7rX3egoB8=\");\n\n_c = AssignationCourseToSchoolYear;\nexport default AssignationCourseToSchoolYear;\n\nvar _c;\n\n$RefreshReg$(_c, \"AssignationCourseToSchoolYear\");","map":{"version":3,"sources":["C:/Users/elkin/OneDrive/Escritorio/2. CÃ³digo/Codigo_v1.2/frontend/src/pages/AssignationCourseToSchoolYear.js"],"names":["Assignation","React","NavbarAdmin","Cookies","useEffect","useState","getCoursesWithoutSchoolYear","updateCourse","getCourseById","getActualSchoolYear","cookies","AssignationCourseToSchoolYear","courses","setCourses","schoolYears","setSchoolYears","course","setCourse","id","setId","loadCourses","response","status","data","loadSchoolYears","findCourse","get","path","window","location","href","handleUpdate","courseData","setCourseData"],"mappings":"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","sourcesContent":["import Assignation from '../components/FormAssignationCourseToSchoolYear';\r\nimport React from 'react';\r\nimport NavbarAdmin from '../components/NavbarAdmin';\r\nimport Cookies from 'universal-cookie/es6';\r\nimport {useEffect, useState} from 'react';\r\nimport {getCoursesWithoutSchoolYear, updateCourse, getCourseById} from '../services/courseService';\r\nimport {getActualSchoolYear} from '../services/periodService';\r\n\r\nconst cookies = new Cookies();\r\n\r\nconst AssignationCourseToSchoolYear = () => {\r\n\r\n    const [courses, setCourses] = useState([]);\r\n    const [schoolYears, setSchoolYears] = useState([]);\r\n    const [course, setCourse] = useState({});\r\n    const [id, setId] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        async function loadCourses() {\r\n            const response = await getCoursesWithoutSchoolYear();\r\n\r\n            if (response.status === 200) {\r\n                setCourses(response.data);\r\n                \r\n            };\r\n        };\r\n\r\n        loadCourses();\r\n        \r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        async function loadSchoolYears() {\r\n            const response = await getActualSchoolYear();\r\n\r\n            if (response.status === 200) {\r\n                setSchoolYears(response.data);\r\n                \r\n            };\r\n        };\r\n\r\n        loadSchoolYears();\r\n        \r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        async function findCourse() {\r\n            const response = await getCourseById(id);\r\n\r\n            if (response.status === 200) {\r\n                setCourse(response.data);\r\n                \r\n            };\r\n        };\r\n\r\n        findCourse();\r\n        \r\n    }, [id]);\r\n\r\n    useEffect(() => {\r\n        if (typeof cookies.get('user') === 'undefined' || cookies.get('type', {path: \"/\"}) !== '0') {\r\n            window.location.href = \"./\";\r\n        }\r\n    });\r\n\r\n    const handleUpdate = (courseData, setCourseData) => {\r\n        updateCourse(courseData, setCourseData);\r\n    };\r\n\r\n    return(\r\n        <>\r\n            <NavbarAdmin /><br/>\r\n            <center>\r\n                <Assignation handleUpdate={handleUpdate} courses={courses} schoolYears={schoolYears} course={course} setCourse={setCourse} setId={setId} />\r\n            </center>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AssignationCourseToSchoolYear;"]},"metadata":{},"sourceType":"module"}